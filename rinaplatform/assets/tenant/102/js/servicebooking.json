{
  "response": {
    "metadata": {
      "moduleName": "BaseModule",
      "componentData": [
        {
          "selector": "base-workflow-component"
        }
      ],
      "moduleJS": "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nexports.__esModule = true;\r\n/**\r\n * Created by ashwini on 15/4/19.\r\n */\r\nvar core_1 = require(\"@angular/core\");\r\nvar amexio_ng_extensions_1 = require(\"amexio-ng-extensions\");\r\nvar common_1 = require(\"@angular/common\");\r\nvar amexio_chart_d3_1 = require(\"amexio-chart-d3\");\r\nvar forms_1 = require(\"@angular/forms\");\r\nvar ContentCardComponent = /** @class */ (function () {\r\n    function ContentCardComponent() {\r\n        this.propertyData = [];\r\n    }\r\n    ContentCardComponent.prototype.ngOnInit = function () {\r\n    };\r\n    __decorate([\r\n        core_1.Input('image-url')\r\n    ], ContentCardComponent.prototype, \"imageUrl\");\r\n    __decorate([\r\n        core_1.Input('title')\r\n    ], ContentCardComponent.prototype, \"title\");\r\n    __decorate([\r\n        core_1.Input('description')\r\n    ], ContentCardComponent.prototype, \"description\");\r\n    __decorate([\r\n        core_1.Input('property-data')\r\n    ], ContentCardComponent.prototype, \"propertyData\");\r\n    ContentCardComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'content-card',\r\n            template: \"\\n    \\n\\n<amexio-card-ce>\\n  <amexio-body-ce [align]=\\\"'start'\\\">\\n    <amexio-layout-columns [border]=\\\"false\\\" [orientation]=\\\"'vertical'\\\" [alignment]=\\\"'space-between'\\\">\\n      <amexio-layout-item >\\n        <amexio-layout-columns [border]=\\\"false\\\" [orientation]=\\\"'horizontal'\\\" [alignment]=\\\"'center'\\\">\\n          <amexio-layout-item [ngClass]=\\\"{'content-card': description}\\\">\\n            <amexio-image [path]=\\\"imageUrl\\\">\\n            </amexio-image>\\n            <br/>\\n            <amexio-label [size]=\\\"'medium-bold'\\\" *ngIf=\\\"title\\\">{{title}}</amexio-label>\\n          </amexio-layout-item>\\n        </amexio-layout-columns>\\n      </amexio-layout-item>\\n\\n      <amexio-layout-item style=\\\"max-height: 200px; overflow: auto;\\\">\\n        <amexio-property-grid *ngIf=\\\"propertyData.length > 0\\\" [key-value-data]=\\\"propertyData\\\" [has-border]=\\\"false\\\"></amexio-property-grid>\\n        <p *ngIf=\\\"description\\\">{{description}}</p>\\n      </amexio-layout-item>\\n    </amexio-layout-columns>\\n  </amexio-body-ce>\\n  <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n    <ng-content></ng-content>\\n  </amexio-action-ce>\\n</amexio-card-ce>\\n\\n\\n\\n  \"\r\n        })\r\n    ], ContentCardComponent);\r\n    return ContentCardComponent;\r\n}());\r\nexports.ContentCardComponent = ContentCardComponent;\r\nvar CustomerVehicleListComponent = /** @class */ (function () {\r\n    function CustomerVehicleListComponent() {\r\n        // @Input('customer-profile') customerProfile: CustomerProfile;\r\n        this.contentCardData = [];\r\n        this.onVehicleListNext = new core_1.EventEmitter();\r\n        this.onBack = new core_1.EventEmitter();\r\n        this.onClose = new core_1.EventEmitter();\r\n        this.selectedVehicle = null;\r\n        this.selected = false;\r\n    }\r\n    CustomerVehicleListComponent.prototype.ngOnInit = function () {\r\n    };\r\n    CustomerVehicleListComponent.prototype.selectVehicle = function (vehicle) {\r\n        this.contentCardData.forEach(function (veh) {\r\n            veh.selected = false;\r\n        });\r\n        vehicle.selected = true;\r\n        if (vehicle.selected) {\r\n            this.selectedVehicle = vehicle;\r\n        }\r\n        else {\r\n            this.selectedVehicle = null;\r\n        }\r\n        this.serviceRef.setSelectedVehicleData(vehicle);\r\n    };\r\n    CustomerVehicleListComponent.prototype.ngOnChanges = function (changes) {\r\n        var _this = this;\r\n        if (changes['httpClient']) {\r\n            this.httpClient.get(this.serviceRef.createRestUrl(this.serviceRef.customerRefInfo.accountNo + '/' + 'allvehicle')).subscribe(function (res) {\r\n                if (res.response.data.allvehicle && res.response.data.allvehicle.length > 0) {\r\n                    res.response.data.allvehicle.forEach(function (vehicle) {\r\n                        _this.contentCardData.push(new ContentCardData(vehicle.vehicleDetail.image, vehicle.vehicleDetail.modelName, _this.createVehiclePropertyStructure(vehicle), vehicle));\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    CustomerVehicleListComponent.prototype.createVehiclePropertyStructure = function (vehicle) {\r\n        var vehicleKeyValuedata = [];\r\n        vehicleKeyValuedata.push(new amexio_ng_extensions_1.PropertyGridModel('Model Year', vehicle.vehicleDetail.modelYear, '', false));\r\n        vehicleKeyValuedata.push(new amexio_ng_extensions_1.PropertyGridModel('License Plate', vehicle.registrationNo, '', false));\r\n        return vehicleKeyValuedata;\r\n    };\r\n    CustomerVehicleListComponent.prototype.onClickHandle = function () {\r\n        this.onVehicleListNext.emit(event);\r\n    };\r\n    CustomerVehicleListComponent.prototype.onBackHandle = function (event) {\r\n        this.onBack.emit(event);\r\n    };\r\n    CustomerVehicleListComponent.prototype.onCancel = function (event) {\r\n        this.onClose.emit(event);\r\n    };\r\n    __decorate([\r\n        core_1.Input()\r\n    ], CustomerVehicleListComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], CustomerVehicleListComponent.prototype, \"serviceRef\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], CustomerVehicleListComponent.prototype, \"onVehicleListNext\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], CustomerVehicleListComponent.prototype, \"onBack\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], CustomerVehicleListComponent.prototype, \"onClose\");\r\n    CustomerVehicleListComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'customer-vehicle-list',\r\n            template: \"\\n    \\n\\n<amexio-card-ce>\\n  <amexio-header-ce>\\n    <amexio-label size=\\\"medium-bold\\\">\\n      QUICK BOOKING\\n    </amexio-label>\\n  </amexio-header-ce>\\n  <amexio-body-ce [align]=\\\"'start'\\\">\\n    <amexio-row>\\n      <amexio-column [size]=\\\"12\\\">\\n        <amexio-label [size]=\\\"'small-bold'\\\"> Please select vehicle you would like to get serviced: </amexio-label>\\n      </amexio-column><br/>\\n    </amexio-row>\\n    <amexio-row>\\n      <amexio-column [fit]=\\\"true\\\" [size]=\\\"4\\\" *ngFor=\\\"let vehicle of contentCardData\\\">\\n        <content-card [title]=\\\"vehicle.title\\\" [image-url]=\\\"vehicle.imageUrl\\\" [property-data]=\\\"vehicle.propertyData\\\">\\n          <div *ngIf=\\\"vehicle.vehicleMetadata.bu === 'CME'\\\">\\n            <amexio-label [font-color]=\\\"'red'\\\">Sorry, we are not accepting Service Bookings for CME Business Unit.</amexio-label>\\n          </div>\\n          <div *ngIf=\\\"vehicle.vehicleMetadata.bu != 'CME'\\\" class=\\\"inputgroup from-group\\\">\\n            <label for=\\\"{{vehicle.vehicleId}}\\\" [attr.aria-checked]=\\\"vehicle.selected\\\" [attr.aria-disabled]=\\\"(vehicle.vehicleMetadata.bu === 'CME')\\\" class=\\\"input-box-container\\\" style=\\\"padding-bottom:0px !important; margin: 5px !important\\\" (click)=\\\"selectVehicle(vehicle)\\\">\\n              Select Vehicle\\n              <input  style=\\\"top:0; left:0\\\" id=\\\"{{vehicle.vehicleId}}\\\" type=\\\"radio\\\"\\n                      name=\\\"selectvehicle\\\" [value]=\\\"vehicle.selected\\\"\\n                      [checked]=\\\"vehicle.selected\\\">\\n\\n              <span class=\\\"input-box-radiobox-label\\\"></span>\\n            </label>\\n          </div>\\n        </content-card>\\n      </amexio-column>\\n    </amexio-row>\\n\\n  </amexio-body-ce>\\n  <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n    <amexio-toolbar>\\n      <amexio-toolbar-item position-right [seperator-position]=\\\"'right'\\\">\\n        <amexio-button [label]=\\\"'Cancel'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'cancel'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onCancel($event)\\\">\\n        </amexio-button>\\n      </amexio-toolbar-item>\\n      <amexio-toolbar-item position-right style=\\\"padding-left: 5px;\\\">\\n        <amexio-button [label]=\\\"'Back'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'Back'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onBackHandle($event)\\\">\\n        </amexio-button>\\n        <amexio-button [label]=\\\"'Next'\\\" [disabled]=\\\"selectedVehicle === null ? true : false\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'Proceed to preferred location'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onClickHandle()\\\">\\n        </amexio-button>\\n      </amexio-toolbar-item>\\n    </amexio-toolbar>\\n  </amexio-action-ce>\\n</amexio-card-ce>\\n\\n\\n  \"\r\n        })\r\n    ], CustomerVehicleListComponent);\r\n    return CustomerVehicleListComponent;\r\n}());\r\nexports.CustomerVehicleListComponent = CustomerVehicleListComponent;\r\nvar RinaStepBoxComponent = /** @class */ (function () {\r\n    function RinaStepBoxComponent() {\r\n        this.stepBoxData = [];\r\n    }\r\n    RinaStepBoxComponent.prototype.ngOnInit = function () {\r\n        this.stepBoxData = [\r\n            {\r\n                \"label\": \"User\",\r\n                \"icon\": \"fa fa-user \",\r\n                \"active\": false,\r\n                \"index\": 3\r\n            },\r\n            {\r\n                \"label\": \"Location\",\r\n                \"icon\": \"fa fa-map-marker \",\r\n                \"active\": false,\r\n                \"index\": 4\r\n            },\r\n            {\r\n                \"label\": \"Service Type\",\r\n                \"icon\": \"fa fa-cubes \",\r\n                \"active\": false,\r\n                \"index\": 5\r\n            },\r\n            {\r\n                \"label\": \"Sale\",\r\n                \"icon\": \"fa fa-shopping-cart\",\r\n                \"active\": false,\r\n                \"index\": 6\r\n            },\r\n            {\r\n                \"label\": \"Confirm\",\r\n                \"icon\": \"fa fa-check-circle \",\r\n                \"active\": false,\r\n                \"index\": 7\r\n            },\r\n            {\r\n                \"label\": \"Info\",\r\n                \"icon\": \"fa fa-info \",\r\n                \"active\": false,\r\n                \"index\": 8\r\n            }\r\n        ];\r\n    };\r\n    __decorate([\r\n        core_1.Input('active-index')\r\n    ], RinaStepBoxComponent.prototype, \"activeIndex\");\r\n    __decorate([\r\n        core_1.Input('step-box-data')\r\n    ], RinaStepBoxComponent.prototype, \"stepBoxData\");\r\n    RinaStepBoxComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'rina-step-box',\r\n            template: \"\\n    <br/>\\n    <div class=\\\"alfahimstepbox\\\">\\n      <div class=\\\"alfahimstepboxitems\\\" [ngClass]=\\\"{'alfahimstepboxitems-active': (item.index === activeIndex), 'alfahimstepboxitems-deactive': (item.index != activeIndex)}\\\" [ngClass]=\\\"{'alfahimstepboxitems-active': true}\\\" *ngFor=\\\"let item of stepBoxData\\\">\\n        <div  [attr.class]=\\\"item.icon\\\" ></div>\\n      </div>\\n    </div>\\n  \\n  \"\r\n        })\r\n    ], RinaStepBoxComponent);\r\n    return RinaStepBoxComponent;\r\n}());\r\nexports.RinaStepBoxComponent = RinaStepBoxComponent;\r\nvar PreferredLocationComponent = /** @class */ (function () {\r\n    function PreferredLocationComponent() {\r\n        this.secondaryButton = 'Back';\r\n        this.onNext = new core_1.EventEmitter();\r\n        this.onPrevious = new core_1.EventEmitter();\r\n        this.onClose = new core_1.EventEmitter();\r\n        this.serviceModel = new ServiceAvailibilityModel();\r\n    }\r\n    PreferredLocationComponent.prototype.ngOnInit = function () { };\r\n    PreferredLocationComponent.prototype.scheduleAppointment = function () {\r\n        if (this.serviceModel.appointmentDate) {\r\n            var todayDate = new Date();\r\n            this.serviceModel.serviceTimeLeft = Math.round(Math.abs((this.serviceModel.selectedSlotDate.getTime() - todayDate.getTime()) / (1000 * 60 * 60 * 24)));\r\n        }\r\n        this.onNext.emit(this.serviceModel);\r\n    };\r\n    PreferredLocationComponent.prototype.backClick = function (event) {\r\n        this.onPrevious.emit(event);\r\n    };\r\n    PreferredLocationComponent.prototype.onCancel = function (event) {\r\n        this.onClose.emit(event);\r\n    };\r\n    __decorate([\r\n        core_1.Input('service-model')\r\n    ], PreferredLocationComponent.prototype, \"serviceModel\");\r\n    __decorate([\r\n        core_1.Input('Secondary-button')\r\n    ], PreferredLocationComponent.prototype, \"secondaryButton\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], PreferredLocationComponent.prototype, \"onNext\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], PreferredLocationComponent.prototype, \"onPrevious\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], PreferredLocationComponent.prototype, \"onClose\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], PreferredLocationComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], PreferredLocationComponent.prototype, \"serviceRef\");\r\n    PreferredLocationComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'preferred-location',\r\n            template: \"\\n\\n\\n    <amexio-card-ce>\\n      <amexio-header-ce>\\n        <amexio-label size=\\\"medium-bold\\\">\\n          Preferred location\\n        </amexio-label>\\n      </amexio-header-ce>\\n      <rina-step-box [active-index]=\\\"4\\\"></rina-step-box>\\n      <amexio-body-ce [align]=\\\"'start'\\\">\\n\\n        <service-availiblity-lib #formgroup [httpClient]=\\\"httpClient\\\" [service-model]=\\\"serviceModel\\\" [start-time]=\\\"10\\\" [end-time]=\\\"15\\\"></service-availiblity-lib>\\n\\n      </amexio-body-ce>\\n\\n      <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n        <amexio-toolbar>\\n          <amexio-toolbar-item position-right>\\n            <div class=\\\"amexio-checkbox-style\\\">\\n              <amexio-checkbox [field-label]=\\\"'Notify SA'\\\" [(ngModel)]=\\\"serviceModel.isNotifySA\\\">\\n              </amexio-checkbox>\\n            </div>\\n\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right [seperator-position]=\\\"'right'\\\">\\n            <amexio-button [label]=\\\"'Cancel'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'cancel'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onCancel($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right style=\\\"padding-left: 5px;\\\">\\n            <amexio-button [label]=\\\"'Back'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'Proceed to personal profile'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"backClick($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right>\\n            <amexio-button [label]=\\\"'Schedule'\\\" [disabled]=\\\"!this.serviceModel.isValidate()\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'Proceed to preferred location'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"scheduleAppointment()\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n        </amexio-toolbar>\\n      </amexio-action-ce>\\n\\n    </amexio-card-ce>\\n  \\n  \"\r\n        })\r\n    ], PreferredLocationComponent);\r\n    return PreferredLocationComponent;\r\n}());\r\nexports.PreferredLocationComponent = PreferredLocationComponent;\r\nvar ServiceAvailiblityComponent = /** @class */ (function () {\r\n    function ServiceAvailiblityComponent() {\r\n        this.startTime = 10;\r\n        this.endTime = 12;\r\n        this.serviceStations = [];\r\n        this.assitantPerson = [];\r\n        this.availableslots = [];\r\n        this.serviceModel = new ServiceAvailibilityModel();\r\n        this.minDate = new common_1.DatePipe('en-US').transform(new Date(), 'dd-MMM-yyyy');\r\n        this.dateRangeModel = new DateRangeModel();\r\n    }\r\n    ServiceAvailiblityComponent.prototype.fetchLocations = function () {\r\n        return this.httpClient.get('https://restapi.amexio.org:8991/alfahim/api/map/');\r\n    };\r\n    ServiceAvailiblityComponent.prototype.fetchSABasedOnLocation = function (locationId) {\r\n        return this.httpClient.get('https://restapi.amexio.org:8991/alfahim/api/map/' + locationId);\r\n    };\r\n    ServiceAvailiblityComponent.prototype.getAllAvailabelSlots = function (dateRangeModel) {\r\n        return this.httpClient.post('https://restapi.amexio.org:8991/alfahim/api/assistant/available', dateRangeModel);\r\n    };\r\n    ServiceAvailiblityComponent.prototype.timeData = function () {\r\n        return new amexio_ng_extensions_1.TimeUtil().timeData(false);\r\n    };\r\n    ServiceAvailiblityComponent.prototype.workingSlot1 = function () {\r\n        return new amexio_ng_extensions_1.TimeUtil().workingslot1();\r\n    };\r\n    ServiceAvailiblityComponent.prototype.checkAvailiblity = function () {\r\n        var _this = this;\r\n        var response;\r\n        this.availableslots = [];\r\n        this.dateRangeModel.inDate = this.serviceModel.appointmentDate;\r\n        this.dateRangeModel.locationid = this.serviceModel.location;\r\n        this.dateRangeModel.type = '2';\r\n        this.getAllAvailabelSlots(this.dateRangeModel).subscribe(function (resp) {\r\n            response = resp;\r\n        }, function (error) {\r\n        }, function () {\r\n            if (response) {\r\n                _this.availableslots = [];\r\n                response.forEach(function (element) {\r\n                    _this.availableslots.push(new amexio_ng_extensions_1.AvailableSlotsModel(new Date(element.datetimeLong), element.data));\r\n                });\r\n            }\r\n        });\r\n    };\r\n    ServiceAvailiblityComponent.prototype.ngOnInit = function () {\r\n        this.initLocation();\r\n        this.initTime();\r\n    };\r\n    ServiceAvailiblityComponent.prototype.onSlotSelection = function (event) {\r\n        this.serviceModel.selectedSlot = event.time;\r\n        this.serviceModel.selectedSlotDate = event.date;\r\n    };\r\n    ServiceAvailiblityComponent.prototype.onAssitantClick = function (event) {\r\n        this.serviceModel.assitantPersonName = event.primaryDisplay;\r\n    };\r\n    ServiceAvailiblityComponent.prototype.initLocation = function () {\r\n        var _this = this;\r\n        var response;\r\n        this.fetchLocations().subscribe(function (resp) {\r\n            response = resp;\r\n        }, function (error) {\r\n        }, function () {\r\n            _this.serviceLocations = response;\r\n            _this.serviceStations = [];\r\n            _this.serviceLocations.forEach(function (element) {\r\n                if (element) {\r\n                    _this.serviceStations.push(new amexio_ng_extensions_1.GoogleMapOverlays(Number(element.latitude), Number(element.longitude), element.locationName + ', UAE', true, 'https://testapi.amexio.org/api/v5.5/assets/images/googlemap/mercgooglemarker.png', element));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ServiceAvailiblityComponent.prototype.initSA = function (id) {\r\n        var _this = this;\r\n        var response;\r\n        var pathVariable = id + '/' + '2';\r\n        this.fetchSABasedOnLocation(pathVariable).subscribe(function (resp) {\r\n            response = resp;\r\n        }, function (error) {\r\n        }, function () {\r\n            _this.assitantPerson = response;\r\n        });\r\n    };\r\n    ServiceAvailiblityComponent.prototype.initTime = function () {\r\n        this.timeSlots = this.workingSlot1();\r\n        if (this.timeSlots && this.timeSlots.length > 0) {\r\n            this.endTime = this.timeSlots.pop().timeId;\r\n        }\r\n    };\r\n    ServiceAvailiblityComponent.prototype.setTime = function (event) {\r\n    };\r\n    ServiceAvailiblityComponent.prototype.onMarkerClick = function (serviceStation) {\r\n        if (serviceStation.primaryKey && this.serviceModel.location !== serviceStation.primaryKey) {\r\n            this.serviceModel.location = serviceStation.primaryKey;\r\n            this.serviceModel.locationName = serviceStation.primaryDisplay;\r\n            this.serviceModel.assitantPersonId = '';\r\n            this.availableslots = [];\r\n            if (serviceStation) {\r\n                this.serviceModel.locationModel.latitude = serviceStation.latitude;\r\n                this.serviceModel.locationModel.longitude = serviceStation.longitude;\r\n            }\r\n            this.initSA(this.serviceModel.location);\r\n        }\r\n    };\r\n    ServiceAvailiblityComponent.prototype.onLocationClick = function (data) {\r\n        if (this.serviceModel.locationName !== data.primaryDisplay) {\r\n            this.serviceModel.assitantPersonId = '';\r\n            this.availableslots = [];\r\n            this.initSA(data.primaryKey);\r\n            this.serviceModel.locationName = data.primaryDisplay;\r\n            this.serviceModel.locationModel.latitude = data.latitude;\r\n            this.serviceModel.locationModel.longitude = data.longitude;\r\n        }\r\n    };\r\n    __decorate([\r\n        core_1.Input('start-time')\r\n    ], ServiceAvailiblityComponent.prototype, \"startTime\");\r\n    __decorate([\r\n        core_1.Input('end-time')\r\n    ], ServiceAvailiblityComponent.prototype, \"endTime\");\r\n    __decorate([\r\n        core_1.Input('service-model')\r\n    ], ServiceAvailiblityComponent.prototype, \"serviceModel\");\r\n    __decorate([\r\n        core_1.Input('is-edit-mode')\r\n    ], ServiceAvailiblityComponent.prototype, \"isEditModel\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceAvailiblityComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceAvailiblityComponent.prototype, \"serviceRef\");\r\n    ServiceAvailiblityComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'service-availiblity-lib',\r\n            template: \"\\n\\n\\n    <amexio-layout-columns [orientation]=\\\"'horizontal'\\\" [fit]=\\\"true\\\" [alignment]=\\\"'start'\\\" [border]=\\\"false\\\">\\n      <amexio-layout-item >\\n        <amexio-layout-columns [orientation]=\\\"'vertical'\\\" [fit]=\\\"true\\\" [alignment]=\\\"'start'\\\" [border]=\\\"false\\\">\\n          <amexio-layout-item>\\n            <amexio-dropdown [(ngModel)]=\\\"serviceModel.location\\\" [enable-sort]=\\\"true\\\" [sort]=\\\"'asc'\\\" [search]=\\\"true\\\" [place-holder]=\\\"'Select Location'\\\" name=\\\"location\\\" [field-label]=\\\"'Select Location'\\\" [data]=\\\"serviceLocations\\\" [display-field]=\\\"'primaryDisplay'\\\"\\n                             [value-field]=\\\"'primaryKey'\\\" (onSingleSelect)=\\\"onLocationClick($event)\\\">\\n            </amexio-dropdown>\\n          </amexio-layout-item>\\n\\n         <!-- <amexio-layout-item >\\n            <amexio-layout-columns [border]=\\\"false\\\" [orientation]=\\\"'horizontal'\\\" [alignment]=\\\"'start'\\\">\\n              <amexio-layout-item>\\n                <amexio-date-time-picker [field-label]=\\\"'Select Date'\\\" [min-date]=\\\"minDate\\\" [time-picker]=\\\"false\\\" [date-picker]=\\\"true\\\" name=\\\"appointmentDate\\\" [min-date]=\\\"todayDate\\\" [(ngModel)]=\\\"serviceModel.appointmentDate\\\">\\n                </amexio-date-time-picker>\\n              </amexio-layout-item>\\n              <amexio-layout-item class=\\\"timebox-width\\\">\\n                <amexio-dropdown [(ngModel)]=\\\"serviceModel.appointmentTime\\\" [enable-sort]=\\\"true\\\" [sort]=\\\"'asc'\\\" [search]=\\\"true\\\" (onSingleSelect)=\\\"setTime($event)\\\" [place-holder]=\\\"'Select Time'\\\" name=\\\"appointmentTime\\\" [field-label]=\\\"'Select time'\\\" [data]=\\\"timeSlots\\\" [display-field]=\\\"'time'\\\"\\n                                 [value-field]=\\\"'timeId'\\\">\\n                </amexio-dropdown>\\n              </amexio-layout-item>\\n            </amexio-layout-columns>\\n          </amexio-layout-item>-->\\n\\n            <amexio-layout-item>\\n              <amexio-date-time-picker [field-label]=\\\"'Select Date'\\\" [min-date]=\\\"minDate\\\" [time-picker]=\\\"false\\\" [date-picker]=\\\"true\\\" name=\\\"appointmentDate\\\" [min-date]=\\\"todayDate\\\" [(ngModel)]=\\\"serviceModel.appointmentDate\\\">\\n              </amexio-date-time-picker>\\n            </amexio-layout-item>\\n\\n\\n\\n\\n          <amexio-layout-item>\\n            <amexio-dropdown [(ngModel)]=\\\"serviceModel.assitantPersonId\\\" [enable-sort]=\\\"true\\\" [sort]=\\\"'asc'\\\" [search]=\\\"true\\\" [place-holder]=\\\"'Select SA'\\\" name=\\\"assitantPerson\\\" [field-label]=\\\"'Service Advisor (SA)'\\\" [data]=\\\"assitantPerson\\\" [display-field]=\\\"'primaryDisplay'\\\"\\n                             [value-field]=\\\"'primaryKey'\\\" (onSingleSelect)=\\\"onAssitantClick($event)\\\">\\n            </amexio-dropdown>\\n          </amexio-layout-item>\\n\\n\\n\\n          <amexio-layout-item>\\n            <amexio-button [label]=\\\"'CHECK SA AVAILIBLITY'\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'CHECK SA AVAILIBLITY'\\\" (onClick)=\\\"checkAvailiblity()\\\"></amexio-button>\\n          </amexio-layout-item>\\n\\n          <amexio-layout-item>\\n            <amexio-ee-appointment [height]=\\\"'200px'\\\"\\n                                   [available-slots-color]=\\\"'white'\\\"\\n                                   [available-slots-bg-color]=\\\"'#4CAF50'\\\"\\n                                   [selected-slot-bg-color]=\\\"'yellow'\\\"\\n                                   [selected-slot-color]=\\\"'green'\\\"\\n                                   [date]=\\\"serviceModel.appointmentDate\\\" [start-time]=\\\"serviceModel.appointmentTime\\\"\\n                                   [end-time]=\\\"endTime\\\" [available-slots]=\\\"availableslots\\\" (onSingleSelect)=\\\"onSlotSelection($event)\\\">\\n\\n            </amexio-ee-appointment>\\n\\n          </amexio-layout-item>\\n        </amexio-layout-columns>\\n      </amexio-layout-item>\\n      <amexio-layout-item [fit]=\\\"true\\\">\\n        <amexio-google-map [initial-zoom-level]=\\\"8\\\" [initial-lat]=\\\"24.4086\\\" [initial-lng]=\\\"55.2701\\\" [height]=\\\"'100%'\\\" [data]=\\\"serviceStations\\\" (onMarkerClick)=\\\"onMarkerClick($event)\\\" [google-map-key]=\\\"'AIzaSyDKSPX97z-ndeh_Mgq3xkaML2Kp9AwHA9s'\\\">\\n        </amexio-google-map>\\n      </amexio-layout-item>\\n\\n    </amexio-layout-columns>\\n\\n\\n\\n\\n  \"\r\n        })\r\n    ], ServiceAvailiblityComponent);\r\n    return ServiceAvailiblityComponent;\r\n}());\r\nexports.ServiceAvailiblityComponent = ServiceAvailiblityComponent;\r\nvar ServiceTypeComponent = /** @class */ (function () {\r\n    function ServiceTypeComponent() {\r\n        this.serviceTypeData = [];\r\n        this.selectedServiceJobs = [];\r\n        this.remarks = '';\r\n        this.onNext = new core_1.EventEmitter();\r\n        this.onBack = new core_1.EventEmitter();\r\n        this.onClose = new core_1.EventEmitter();\r\n        this.resetBindedData();\r\n        this.serviceTypeData = [\r\n            {\r\n                'typeName': 'Check Battery System',\r\n                'typeValue': 'Check Battery System'\r\n            },\r\n            {\r\n                'typeName': 'Horn Check',\r\n                'typeValue': 'Horn Check'\r\n            },\r\n            {\r\n                'typeName': 'Instrument Cluster / Display Instruments Check',\r\n                'typeValue': 'Instrument Cluster / Display Instruments Check'\r\n            },\r\n            {\r\n                'typeName': 'Steering Wheel Heater Check',\r\n                'typeValue': 'Steering Wheel Heater Check'\r\n            },\r\n            {\r\n                'typeName': 'Fuel Indicator Level Check',\r\n                'typeValue': 'Fuel Indicator Level Check'\r\n            },\r\n            {\r\n                'typeName': 'Electrical System Check',\r\n                'typeValue': 'Electrical System Check'\r\n            }\r\n        ];\r\n    }\r\n    ServiceTypeComponent.prototype.ngOnChanges = function (changes) {\r\n        if (changes['serviceRef']) {\r\n            this.serviceRef = changes.serviceRef.currentValue;\r\n            this.assignOldData();\r\n        }\r\n    };\r\n    ServiceTypeComponent.prototype.assignOldData = function () {\r\n        var _this = this;\r\n        var dataRef = this.serviceRef.getExtraServiceData();\r\n        if (dataRef) {\r\n            this.remarks = dataRef.remarks;\r\n            if (dataRef.selectedJobType) {\r\n                this.selectedServiceJobs = dataRef.selectedJobType;\r\n                dataRef.selectedJobType.forEach(function (selectedItem) {\r\n                    _this.serviceTypeData.forEach(function (item, index) {\r\n                        if (selectedItem.typeValue === item.typeValue) {\r\n                            _this.serviceTypeData[index] = selectedItem;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n    ServiceTypeComponent.prototype.ngOnInit = function () {\r\n    };\r\n    ServiceTypeComponent.prototype.getSelectedType = function (event) {\r\n        this.selectedServiceJobs = event;\r\n    };\r\n    ServiceTypeComponent.prototype.onNextHandle = function () {\r\n        var createEmitingObj = {\r\n            selectedJobType: this.selectedServiceJobs,\r\n            remarks: this.remarks\r\n        };\r\n        this.onNext.emit(createEmitingObj);\r\n        this.resetBindedData();\r\n    };\r\n    ServiceTypeComponent.prototype.onBackHandle = function (event) {\r\n        this.onBack.emit(event);\r\n    };\r\n    ServiceTypeComponent.prototype.onCancel = function (event) {\r\n        this.onClose.emit(event);\r\n    };\r\n    ServiceTypeComponent.prototype.resetBindedData = function () {\r\n        this.selectedServiceJobs = [];\r\n        this.remarks = '';\r\n    };\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceTypeComponent.prototype, \"onNext\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceTypeComponent.prototype, \"onBack\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceTypeComponent.prototype, \"onClose\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceTypeComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceTypeComponent.prototype, \"serviceRef\");\r\n    ServiceTypeComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'service-job-type',\r\n            template: \"\\n\\n    <amexio-card-ce>\\n      <amexio-header-ce>\\n        <amexio-label size=\\\"medium-bold\\\">\\n          SELECT SERVICE TYPE\\n        </amexio-label>\\n      </amexio-header-ce>\\n      <rina-step-box [active-index]=\\\"5\\\"></rina-step-box>\\n      <amexio-body-ce [align]=\\\"'start'\\\">\\n        <amexio-row>\\n          <amexio-column [size]=\\\"6\\\">\\n            <amexio-listbox [enable-checkbox]=\\\"true\\\" [height]=\\\"300\\\" [header]=\\\"'Service Type'\\\" [data]=\\\"serviceTypeData\\\" [display-field]=\\\"'typeName'\\\" (selectedRows)=\\\"getSelectedType($event)\\\">\\n            </amexio-listbox>\\n            <amexio-textarea-input field-label=\\\"Remark\\\" [(ngModel)]=\\\"remarks\\\" name=\\\"remarks\\\" place-holder=\\\"Enter remark\\\">\\n            </amexio-textarea-input>\\n          </amexio-column>\\n        </amexio-row>\\n      </amexio-body-ce>\\n      <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n        <amexio-toolbar>\\n          <amexio-toolbar-item position-right [seperator-position]=\\\"'right'\\\">\\n            <amexio-button [label]=\\\"'Cancel'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'cancel'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onCancel($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right style=\\\"padding-left: 5px;\\\">\\n            <amexio-button [label]=\\\"'Back'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'Back'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onBackHandle($event)\\\">\\n            </amexio-button>\\n            <amexio-button [label]=\\\"'Next'\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'skip'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onNextHandle()\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n        </amexio-toolbar>\\n      </amexio-action-ce>\\n    </amexio-card-ce>\\n\\n\\n  \"\r\n        })\r\n    ], ServiceTypeComponent);\r\n    return ServiceTypeComponent;\r\n}());\r\nexports.ServiceTypeComponent = ServiceTypeComponent;\r\nvar BeforeConfirmComponent = /** @class */ (function () {\r\n    function BeforeConfirmComponent() {\r\n        this.accessioriesData = [];\r\n        this.onBeforeConfirmClick = new core_1.EventEmitter();\r\n        this.onBeforeBack = new core_1.EventEmitter();\r\n        this.onClose = new core_1.EventEmitter();\r\n        this.steps = [];\r\n        this.steps = ['fa-user ', 'fa-home', 'fa-shopping-cart', 'fa fa-money'];\r\n    }\r\n    BeforeConfirmComponent.prototype.ngOnInit = function () {\r\n        this.accessioriesData = [\r\n            {\r\n                \"imageUrl\": \"assets/images/mbwatch.jpg\",\r\n                \"description\": \"Men's Black Edition Business chronograph watch. Stainless steel case with black PVD coating. Black dial with blue highlights. Stainless steel hands with luminous detail. Stainless steel bracelet strap with black PVD coating. Stopwatch function. Water-resistant to 10 ATM. Diameter 43 mm. Ronda 5021 quartz chronograph movement. Swiss made.\"\r\n            },\r\n            {\r\n                \"imageUrl\": \"assets/images/mbcap.jpg\",\r\n                \"description\": \"Basic cap. 100% cotton. Metal clasp for adjusting fit. Black B6 695 2242. Black/white B6 695 2243. Navy B6 695 2244\"\r\n            },\r\n            {\r\n                \"imageUrl\": \"assets/images/mbcar.jpg\",\r\n                \"description\": \"The annual endurance race of the Mille Miglia attracted a very impressive group of competitors in 1955. Mercedes-Benz had big plans up its sleeve, so it sent over a fleet of four racing cars, all of the type 300 SLR, which was to make its debut here. Piloted by world-famous top drivers, the 300 SLR was intended to be a passport to victory over such hard competitors as Ferrari, Maserati, and Aston Martin. Half of Italy was on its feet to follow the national racing highlight of the year.\"\r\n            },\r\n            {\r\n                \"imageUrl\": \"assets/images/mbkey.png\",\r\n                \"description\": \"This practical key ring in robust stainless steel echoes the illuminated version of the central Mercedes star. The black PVD-coated background features a diamond pattern while the inner contours of the Mercedes star have a luminous finish which, after exposure to daylight or an artificial light source, glows blue in the dark for up to four hours. The key ring, which measures approx. 9 cm in length, features a flat split ring, engraved with Mercedes-Benz, and three mini split rings for quick removal and replacement of individual keys.\"\r\n            }\r\n        ];\r\n    };\r\n    BeforeConfirmComponent.prototype.onClickHandle = function (event) {\r\n        this.onBeforeConfirmClick.emit(event);\r\n    };\r\n    BeforeConfirmComponent.prototype.onBackHandle = function (event) {\r\n        this.onBeforeBack.emit(event);\r\n    };\r\n    BeforeConfirmComponent.prototype.onCancel = function (event) {\r\n        this.onClose.emit(event);\r\n    };\r\n    __decorate([\r\n        core_1.Output()\r\n    ], BeforeConfirmComponent.prototype, \"onBeforeConfirmClick\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], BeforeConfirmComponent.prototype, \"onBeforeBack\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], BeforeConfirmComponent.prototype, \"onClose\");\r\n    BeforeConfirmComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'before-confirm',\r\n            template: \"\\n    \\n    <amexio-card-ce>\\n      <amexio-header-ce>\\n        <amexio-label size=\\\"medium-bold\\\">\\n          BEFORE YOU CONFIRM\\n        </amexio-label>\\n      </amexio-header-ce>\\n      <rina-step-box [active-index]=\\\"6\\\"></rina-step-box>\\n\\n      <amexio-body-ce [align]=\\\"'start'\\\">\\n        <amexio-label [size]=\\\"'medium'\\\">We've got some iconic Lifestyle Accessories just for you!</amexio-label>\\n        <amexio-layout-columns [fit]=\\\"false\\\" [orientation]=\\\"'horizontal'\\\" [border]=\\\"false\\\" [alignment]=\\\"'start'\\\">\\n          <amexio-layout-item *ngFor=\\\"let accessiories of accessioriesData\\\" style=\\\"min-width:24%;\\\">\\n            <content-card [image-url]=\\\"'https://demo.amexio.org/alfahim/'+accessiories.imageUrl\\\" [description]=\\\"accessiories.description\\\">\\n              <amexio-button [label]=\\\"'SHOW ME'\\\" [type]=\\\"'green'\\\" [tooltip]=\\\"'show me'\\\">\\n              </amexio-button>\\n            </content-card>\\n          </amexio-layout-item>\\n        </amexio-layout-columns>\\n      </amexio-body-ce>\\n      <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n        <amexio-toolbar>\\n          <amexio-toolbar-item position-right [seperator-position]=\\\"'right'\\\">\\n            <amexio-button [label]=\\\"'Cancel'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'cancel'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onCancel($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right style=\\\"padding-left: 5px;\\\">\\n            <amexio-button [label]=\\\"'Back'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'Back'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onBackHandle($event)\\\">\\n            </amexio-button>\\n            <amexio-button [label]=\\\"'SKIP'\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'skip'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onClickHandle($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n        </amexio-toolbar>\\n      </amexio-action-ce>\\n    </amexio-card-ce>\\n\\n  \"\r\n        })\r\n    ], BeforeConfirmComponent);\r\n    return BeforeConfirmComponent;\r\n}());\r\nexports.BeforeConfirmComponent = BeforeConfirmComponent;\r\nvar ServiceConfirmationComponent = /** @class */ (function () {\r\n    function ServiceConfirmationComponent() {\r\n        this.serviceLocations = [];\r\n        this.timeSlots = [];\r\n        this.assitantPerson = [];\r\n        this.orderConfirm = true;\r\n        this.serviceStations = [];\r\n        this.extraServiceData = null;\r\n        this.showLoader = false;\r\n        this.serviceConfirmData = [];\r\n        this.onPrevious = new core_1.EventEmitter();\r\n        this.onConfirm = new core_1.EventEmitter();\r\n        this.onClose = new core_1.EventEmitter();\r\n    }\r\n    ServiceConfirmationComponent.prototype.ngOnChanges = function (changes) {\r\n        if (changes['serviceRef']) {\r\n            if (this.serviceModel) {\r\n                this.loadData();\r\n            }\r\n            this.serviceRef = changes.serviceRef.currentValue;\r\n            this.extraServiceData = this.serviceRef.getExtraServiceData();\r\n            if (this.serviceRef.customerRefInfo.data) {\r\n                this.createServiceDataStructure(this.serviceRef.customerRefInfo.data);\r\n                this.personalDetails = this.serviceRef.customerRefInfo.data;\r\n            }\r\n        }\r\n    };\r\n    ServiceConfirmationComponent.prototype.createServiceDataStructure = function (personalDetails) {\r\n        this.serviceConfirmData = [];\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Name', personalDetails.firstName + ' ' + personalDetails.lastName));\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Booking Date', this.serviceRef.datePipe.transform(this.serviceModel.selectedSlotDate, 'MMM dd, yyyy')));\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Booking Time', this.serviceModel.selectedSlot.toString()));\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Assitant Name', this.serviceModel.assitantPersonName));\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Phone no', personalDetails.mobile));\r\n        this.serviceConfirmData.push(new RinaccmPropertyGridModel('Email Id', personalDetails.email));\r\n    };\r\n    ServiceConfirmationComponent.prototype.ngOnInit = function () {\r\n        this.serviceStations = [];\r\n        this.serviceStations.push(new amexio_ng_extensions_1.GoogleMapOverlays(Number(this.serviceModel.locationModel.latitude), Number(this.serviceModel.locationModel.longitude), this.serviceModel.locationName + ', UAE', true, 'https://testapi.amexio.org/api/v5.5/assets/images/googlemap/mercgooglemarker.png', {\r\n            country: 'United Arab Emirates',\r\n            capital: 'Abu Dhabi'\r\n        }));\r\n    };\r\n    ServiceConfirmationComponent.prototype.confirmAppointment = function (personalDetails) {\r\n        var _this = this;\r\n        this.showLoader = true;\r\n        var response;\r\n        var requestBody = {\r\n            'profileDetails': this.serviceRef.customerRefInfo.data,\r\n            'orderDetails': this.serviceRef.getPeferredLocation()\r\n        };\r\n        this.httpClient.post(this.serviceRef.baseServerUrl + 'booking/confirm', requestBody).subscribe(function (res) {\r\n            response = res;\r\n        }, function (err) {\r\n            _this.showLoader = false;\r\n        }, function () {\r\n            if (response.success) {\r\n                _this.showLoader = false;\r\n                _this.onConfirm.emit(personalDetails);\r\n            }\r\n            else {\r\n                _this.showLoader = false;\r\n            }\r\n        });\r\n    };\r\n    ServiceConfirmationComponent.prototype.onBackClick = function () {\r\n        this.onPrevious.emit(this.serviceModel);\r\n    };\r\n    ServiceConfirmationComponent.prototype.close = function (event) {\r\n        this.orderConfirm = false;\r\n    };\r\n    ServiceConfirmationComponent.prototype.loadData = function () {\r\n        this.loadLocations();\r\n        this.loadAssitants();\r\n        this.loadWorkingSlots();\r\n    };\r\n    ServiceConfirmationComponent.prototype.loadWorkingSlots = function () {\r\n        this.timeSlots = new amexio_ng_extensions_1.TimeUtil().workingslot1();\r\n    };\r\n    ServiceConfirmationComponent.prototype.loadAssitants = function () {\r\n        var _this = this;\r\n        var response;\r\n        this.serviceRef.getAssitantList(this.serviceModel.location).subscribe(function (res) {\r\n            response = res;\r\n        }, // tslint:disable-next-line:no-shadowed-variable\r\n        function (error) {\r\n            console.log('Invalid url');\r\n        }, function () {\r\n            _this.assitantPerson = response;\r\n        });\r\n    };\r\n    ServiceConfirmationComponent.prototype.loadLocations = function () {\r\n        var _this = this;\r\n        var response;\r\n        this.serviceRef.getLocations().subscribe(function (res) {\r\n            response = res;\r\n        }, // tslint:disable-next-line:no-shadowed-variable\r\n        function (error) {\r\n            console.log('Invalid url');\r\n        }, function () {\r\n            _this.serviceLocations = response;\r\n        });\r\n    };\r\n    ServiceConfirmationComponent.prototype.onCancel = function (event) {\r\n        this.onClose.emit(event);\r\n    };\r\n    __decorate([\r\n        core_1.Input('service-model')\r\n    ], ServiceConfirmationComponent.prototype, \"serviceModel\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceConfirmationComponent.prototype, \"onPrevious\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceConfirmationComponent.prototype, \"onConfirm\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], ServiceConfirmationComponent.prototype, \"onClose\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceConfirmationComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], ServiceConfirmationComponent.prototype, \"serviceRef\");\r\n    ServiceConfirmationComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'service-confirmation',\r\n            template: \"\\n\\n    <amexio-spinner [show]=\\\"showLoader\\\" [type]=\\\"'rectanglebounce'\\\" [vertical-position]=\\\"'center'\\\" [horizontal-position]=\\\"'center'\\\" [color]=\\\"'yellow'\\\">\\n    </amexio-spinner>\\n\\n\\n\\n    <amexio-card-ce class=\\\"serviceconf\\\">\\n      <amexio-header-ce>\\n        <amexio-label size=\\\"medium-bold\\\">\\n          PLEASE CONFIRM DETAILS\\n        </amexio-label>\\n      </amexio-header-ce>\\n      <rina-step-box [active-index]=\\\"7\\\"></rina-step-box>\\n      <amexio-body-ce [align]=\\\"'start'\\\">\\n        <amexio-layout-columns [orientation]=\\\"'horizontal'\\\" [border]=\\\"false\\\" [alignment]=\\\"'end'\\\">\\n          <table>\\n            <tr style=\\\"vertical-align: top;text-align: left\\\" *ngFor=\\\"let data of serviceConfirmData\\\">\\n              <td>\\n                <b>{{data.fieldName}}</b>\\n              </td>\\n              <td style=\\\"word-break: break-all;max-width: 250px\\\">\\n                {{data.fieldValue}}\\n              </td>\\n            </tr>\\n\\n            <tr style=\\\"vertical-align: top;text-align: left\\\">\\n              <td>\\n                <b>Service Type</b>\\n              </td>\\n              <td style=\\\"word-break: break-all;max-width: 250px\\\">\\n                <ng-container *ngIf=\\\"extraServiceData && extraServiceData.selectedJobType\\\">\\n                  <ng-container *ngFor=\\\"let type of extraServiceData.selectedJobType; let index=index\\\">\\n                    {{index+1}}. {{type.typeName}}<br>\\n                  </ng-container>\\n                </ng-container>\\n              </td>\\n            </tr>\\n\\n            <tr style=\\\"vertical-align: top;text-align: left\\\" *ngIf=\\\"extraServiceData\\\">\\n              <td>\\n                <b>Remarks</b>\\n              </td>\\n              <td style=\\\"word-break: break-all;max-width: 250px\\\">\\n                {{extraServiceData.remarks}}\\n              </td>\\n            </tr>\\n          </table>\\n          <amexio-layout-item [fit]=\\\"true\\\">\\n            <amexio-google-map [initial-zoom-level]=\\\"8\\\" [initial-lat]=\\\"24.4086\\\" [initial-lng]=\\\"55.2701\\\" [height]=\\\"'100%'\\\" [data]=\\\"serviceStations\\\" [google-map-key]=\\\"'AIzaSyDKSPX97z-ndeh_Mgq3xkaML2Kp9AwHA9s'\\\">\\n            </amexio-google-map>\\n          </amexio-layout-item>\\n        </amexio-layout-columns>\\n\\n      </amexio-body-ce>\\n      <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n        <amexio-toolbar>\\n          <amexio-toolbar-item position-right [seperator-position]=\\\"'right'\\\">\\n            <amexio-button [label]=\\\"'Cancel'\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'cancel'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"onCancel($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n          <amexio-toolbar-item position-right style=\\\"padding-left: 5px;\\\">\\n            <amexio-button [label]=\\\"'Back'\\\" (onClick)=\\\"onBackClick()\\\" [type]=\\\"'theme-backgroundcolor'\\\" [tooltip]=\\\"'Proceed to preferred location'\\\" [size]=\\\"'large'\\\">\\n            </amexio-button>\\n            <amexio-button [label]=\\\"'Confirm'\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'Confirm'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"confirmAppointment($event)\\\">\\n            </amexio-button>\\n          </amexio-toolbar-item>\\n        </amexio-toolbar>\\n      </amexio-action-ce>\\n    </amexio-card-ce>\\n\\n\\n\\n  \"\r\n        })\r\n    ], ServiceConfirmationComponent);\r\n    return ServiceConfirmationComponent;\r\n}());\r\nexports.ServiceConfirmationComponent = ServiceConfirmationComponent;\r\nvar AppoinmentConfirmationComponent = /** @class */ (function () {\r\n    function AppoinmentConfirmationComponent() {\r\n        this.onConfirm = new core_1.EventEmitter();\r\n    }\r\n    AppoinmentConfirmationComponent.prototype.ngOnChanges = function (changes) {\r\n        if (changes['serviceRef']) {\r\n            this.serviceAvailibilityModel = this.serviceRef.getPeferredLocation();\r\n        }\r\n    };\r\n    AppoinmentConfirmationComponent.prototype.close = function (event) {\r\n        this.onConfirm.emit(event);\r\n    };\r\n    __decorate([\r\n        core_1.Output()\r\n    ], AppoinmentConfirmationComponent.prototype, \"onConfirm\");\r\n    __decorate([\r\n        core_1.Input('appointment-msg')\r\n    ], AppoinmentConfirmationComponent.prototype, \"appointmentMsg\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], AppoinmentConfirmationComponent.prototype, \"httpClient\");\r\n    __decorate([\r\n        core_1.Input()\r\n    ], AppoinmentConfirmationComponent.prototype, \"serviceRef\");\r\n    AppoinmentConfirmationComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'appointment-confirmation',\r\n            template: \"\\n\\n\\n\\n    <amexio-card-ce>\\n      <amexio-header-ce>\\n        <amexio-label size=\\\"medium-bold\\\">\\n          THANK YOU\\n        </amexio-label>\\n      </amexio-header-ce>\\n      <rina-step-box [active-index]=\\\"8\\\"></rina-step-box>\\n      <amexio-body-ce [align]=\\\"'start'\\\">\\n        <amexio-row>\\n          <amexio-column size=\\\"3\\\"></amexio-column>\\n          <amexio-column size=\\\"6\\\">\\n            <amexio-label>{{appointmentMsg}}</amexio-label><br /><br />\\n            <amexio-label>Service Location:</amexio-label><br />\\n            <amexio-label>Emirates Motor Company</amexio-label><br />\\n            <amexio-label>M5, intersection, 17th Street</amexio-label><br />\\n            <amexio-label>Phone: +91.0987654321</amexio-label><br /><br />\\n          </amexio-column>\\n          <amexio-column size=\\\"3\\\"></amexio-column>\\n        </amexio-row>\\n      </amexio-body-ce>\\n      <amexio-action-ce [align]=\\\"'flex-end'\\\" [border-top]=\\\"true\\\">\\n        <amexio-button [label]=\\\"'Close'\\\" [type]=\\\"'theme-color'\\\" [tooltip]=\\\"'Close'\\\" [size]=\\\"'large'\\\" (onClick)=\\\"close($event)\\\">\\n        </amexio-button>\\n      </amexio-action-ce>\\n    </amexio-card-ce>\\n\\n\\n  \"\r\n        })\r\n    ], AppoinmentConfirmationComponent);\r\n    return AppoinmentConfirmationComponent;\r\n}());\r\nexports.AppoinmentConfirmationComponent = AppoinmentConfirmationComponent;\r\nvar BaseWorkFlowComponent = /** @class */ (function () {\r\n    function BaseWorkFlowComponent() {\r\n        this.currentstep = 2;\r\n        this.onCancel = new core_1.EventEmitter();\r\n        this.onSubmit = new core_1.EventEmitter();\r\n        this.serviceModel = new ServiceAvailibilityModel();\r\n    }\r\n    BaseWorkFlowComponent.prototype.ngOnInit = function () {\r\n    };\r\n    BaseWorkFlowComponent.prototype.vehicleListBack = function (event) {\r\n        this.onCancel.emit();\r\n    };\r\n    BaseWorkFlowComponent.prototype.onVehicleListHandle = function () {\r\n        this.currentstep = this.serviceRef.getNextWindow(this.currentstep + 1);\r\n    };\r\n    BaseWorkFlowComponent.prototype.scheduleAppointment = function (serviceModel) {\r\n        this.serviceRef.setPeferredLocation(serviceModel);\r\n        this.currentstep = this.serviceRef.getNextWindow(this.currentstep);\r\n    };\r\n    BaseWorkFlowComponent.prototype.onServiceTypeNextHandle = function (event) {\r\n        this.serviceRef.setExtraServiceData(event);\r\n        this.currentstep = this.serviceRef.getNextWindow(this.currentstep);\r\n    };\r\n    BaseWorkFlowComponent.prototype.cancelHandle = function (event) {\r\n        this.onCancel.emit();\r\n    };\r\n    BaseWorkFlowComponent.prototype.backHandle = function (event) {\r\n        this.currentstep = this.serviceRef.getPreviousWindow(this.currentstep - 1);\r\n    };\r\n    BaseWorkFlowComponent.prototype.onBeforeConfirmClickHandle = function (event) {\r\n        this.currentstep = this.serviceRef.getNextWindow(this.currentstep);\r\n    };\r\n    BaseWorkFlowComponent.prototype.onAppointmentConfirm = function (event) {\r\n        var pModel = this.serviceRef.customerRefInfo.data;\r\n        var fullName = pModel.firstName + pModel.lastName;\r\n        var serModel = this.serviceRef.getPeferredLocation();\r\n        this.appointmentMsg = 'Service has been booked on ' + this.serviceRef.datePipe.transform(serModel.appointmentDate, 'MMM dd, yyyy') + ' at ' + serModel.selectedSlot + ' for ' + fullName + '.';\r\n        this.currentstep = this.serviceRef.getNextWindow(this.currentstep);\r\n    };\r\n    __decorate([\r\n        core_1.Output()\r\n    ], BaseWorkFlowComponent.prototype, \"onCancel\");\r\n    __decorate([\r\n        core_1.Output()\r\n    ], BaseWorkFlowComponent.prototype, \"onSubmit\");\r\n    BaseWorkFlowComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'base-workflow-component',\r\n            template: \"\\n      <amexio-badge [absolute]=\\\"true\\\" [background]=\\\"'black'\\\" [color]=\\\"'white'\\\" [top]=\\\"'0'\\\" [right]=\\\"'0'\\\">\\n        <amexio-label style=\\\"padding:10px 20px;\\\" size=\\\"medium\\\">New Service Booking</amexio-label>\\n      </amexio-badge>\\n\\n\\n      <customer-vehicle-list *ngIf=\\\"(currentstep === 2)\\\"  [httpClient]=\\\"httpClient\\\" [serviceRef]=\\\"serviceRef\\\" (onBack)=\\\"vehicleListBack($event)\\\" (onClose)=\\\"cancelHandle($event)\\\" (onVehicleListNext)=\\\"onVehicleListHandle($event)\\\">\\n      </customer-vehicle-list>\\n\\n\\n      <preferred-location *ngIf=\\\"(currentstep === 4)\\\" [httpClient]=\\\"httpClient\\\" [serviceRef]=\\\"serviceRef\\\" (onNext)=\\\"scheduleAppointment($event)\\\" (onPrevious)=\\\"backHandle($event)\\\" (onClose)=\\\"cancelHandle($event)\\\" [service-model]=\\\"serviceModel\\\">\\n      </preferred-location>\\n\\n      <service-job-type *ngIf=\\\"(currentstep === 5)\\\" [httpClient]=\\\"httpClient\\\" [serviceRef]=\\\"serviceRef\\\" (onNext)=\\\"onServiceTypeNextHandle($event)\\\" (onBack)=\\\"backHandle($event)\\\" (onClose)=\\\"cancelHandle($event)\\\"></service-job-type>\\n\\n      <before-confirm *ngIf=\\\"(currentstep === 6)\\\" (onClose)=\\\"cancelHandle($event)\\\" (onBeforeBack)=\\\"backHandle($event)\\\" (onBeforeConfirmClick)=\\\"onBeforeConfirmClickHandle($event)\\\">\\n      </before-confirm>\\n\\n      <service-confirmation *ngIf=\\\"(currentstep === 7)\\\"  [service-model]=\\\"serviceModel\\\"  [httpClient]=\\\"httpClient\\\" [serviceRef]=\\\"serviceRef\\\" (onClose)=\\\"cancelHandle($event)\\\" (onPrevious)=\\\"backHandle($event)\\\" (onConfirm)=\\\"onAppointmentConfirm($event)\\\">\\n      </service-confirmation>\\n\\n      <appointment-confirmation *ngIf=\\\"(currentstep === 8)\\\" [appointment-msg]=\\\"appointmentMsg\\\" [httpClient]=\\\"httpClient\\\" [serviceRef]=\\\"serviceRef\\\" (onConfirm)=\\\"cancelHandle($event)\\\">\\n      </appointment-confirmation>\\n\\n    \"\r\n        })\r\n    ], BaseWorkFlowComponent);\r\n    return BaseWorkFlowComponent;\r\n}());\r\nexports.BaseWorkFlowComponent = BaseWorkFlowComponent;\r\nvar BaseModule = /** @class */ (function () {\r\n    function BaseModule() {\r\n    }\r\n    BaseModule = __decorate([\r\n        core_1.NgModule({\r\n            imports: [\r\n                amexio_ng_extensions_1.AmexioWidgetModule,\r\n                amexio_chart_d3_1.AmexioChartD3Module,\r\n                common_1.CommonModule,\r\n                forms_1.FormsModule,\r\n                amexio_ng_extensions_1.AmexioEnterpriseModule,\r\n                forms_1.ReactiveFormsModule,\r\n            ],\r\n            declarations: [ContentCardComponent,\r\n                RinaStepBoxComponent,\r\n                PreferredLocationComponent,\r\n                ServiceAvailiblityComponent,\r\n                ServiceAvailiblityComponent,\r\n                ServiceTypeComponent,\r\n                BeforeConfirmComponent,\r\n                ServiceConfirmationComponent,\r\n                AppoinmentConfirmationComponent,\r\n                CustomerVehicleListComponent, BaseWorkFlowComponent],\r\n            providers: [amexio_chart_d3_1.DeviceQueryService, common_1.DatePipe]\r\n        })\r\n    ], BaseModule);\r\n    return BaseModule;\r\n}());\r\nexports.BaseModule = BaseModule;\r\nvar ContentCardData = /** @class */ (function () {\r\n    function ContentCardData(_imageUrl, _title, _propertyData, _vehicleMetadata) {\r\n        this.propertyData = [];\r\n        this.imageUrl = _imageUrl;\r\n        this.title = _title;\r\n        this.propertyData = _propertyData;\r\n        this.selected = false;\r\n        this.vehicleMetadata = _vehicleMetadata;\r\n    }\r\n    return ContentCardData;\r\n}());\r\nexports.ContentCardData = ContentCardData;\r\nvar ServiceAvailibilityModel = /** @class */ (function () {\r\n    function ServiceAvailibilityModel() {\r\n        this.appointmentDate = new Date();\r\n        this.appointmentTime = 10;\r\n        this.selectedSlotDate = new Date();\r\n        this.vehicleName = '';\r\n        this.vehiclePlate = '';\r\n        this.locationModel = new LocationModel();\r\n    }\r\n    ServiceAvailibilityModel.prototype.isValidate = function () {\r\n        var isValid = false;\r\n        if (this.location != null && this.appointmentDate != null && this.appointmentTime != null && this.assitantPersonId != null && this.selectedSlot != null) {\r\n            isValid = true;\r\n        }\r\n        else {\r\n            isValid = false;\r\n        }\r\n        return isValid;\r\n    };\r\n    return ServiceAvailibilityModel;\r\n}());\r\nexports.ServiceAvailibilityModel = ServiceAvailibilityModel;\r\nvar BaseModel = /** @class */ (function () {\r\n    function BaseModel() {\r\n    }\r\n    return BaseModel;\r\n}());\r\nexports.BaseModel = BaseModel;\r\nvar LocationModel = /** @class */ (function (_super) {\r\n    __extends(LocationModel, _super);\r\n    function LocationModel() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return LocationModel;\r\n}(BaseModel));\r\nexports.LocationModel = LocationModel;\r\nvar ServiceAssistantModel = /** @class */ (function (_super) {\r\n    __extends(ServiceAssistantModel, _super);\r\n    function ServiceAssistantModel() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return ServiceAssistantModel;\r\n}(BaseModel));\r\nexports.ServiceAssistantModel = ServiceAssistantModel;\r\nvar DateRangeModel = /** @class */ (function () {\r\n    function DateRangeModel() {\r\n    }\r\n    return DateRangeModel;\r\n}());\r\nexports.DateRangeModel = DateRangeModel;\r\nvar PersonalDetails = /** @class */ (function () {\r\n    function PersonalDetails() {\r\n        this.perferredContact = '1';\r\n    }\r\n    return PersonalDetails;\r\n}());\r\nexports.PersonalDetails = PersonalDetails;\r\nvar RinaccmPropertyGridModel = /** @class */ (function () {\r\n    function RinaccmPropertyGridModel(_fieldName, _fieldValue) {\r\n        this.fieldName = _fieldName;\r\n        this.fieldValue = _fieldValue;\r\n    }\r\n    return RinaccmPropertyGridModel;\r\n}());\r\nexports.RinaccmPropertyGridModel = RinaccmPropertyGridModel;\r\n"
    }
  }
}
